GetFilename(fixedVolumeHead ${fixedVolume} NAME_WITHOUT_EXTENSION)
GetFilename(fixedVolumeTail ${fixedVolume} NAME)
GetFilename(OutputDir ${fixedVolume} PATH)
If (${OutputDir} == '')
  set (OutputDir '.')
EndIf(${OutputDir})

GetFilename(movingVolumeHead ${movingVolume} NAME_WITHOUT_EXTENSION)
GetFilename(movingVolumeTail ${movingVolume} NAME)

# FA map creation
echo()
echo('FA map creation...')
echo('fixed FA map creation...')
If (${outputFixedFAVolume} == '')
  set (fixedFAMap ${OutputDir}/${fixedVolumeHead}_FA.nrrd)
Else(${outputFixedFAVolume})
  set (fixedFAMap ${outputFixedFAVolume})
EndIf(${outputFixedFAVolume})
set (commandDiffusionTensorMathematics ${DiffusionTensorMathematicsCmd} ${fixedVolume} ${fixedFAMap})
Run (outputDiffusionTensorMathematics ${commandDiffusionTensorMathematics} errorDiffusionTensorMathematics)
If(${errorDiffusionTensorMathematics} != '')
  echo('Error DiffusionTensorMathematics: ' ${errorDiffusionTensorMathematics})
  exit()
Endif(${errorDiffusionTensorMathematics})

echo('moving FA map creation...')
If (${outputMovingFAVolume} == '')
  set (movingFAMap ${OutputDir}/${movingVolumeHead}_FA.nrrd)
Else(${outputMovingFAVolume})
  set (movingFAMap ${outputMovingFAVolume})
EndIf(${outputMovingFAVolume})
set (commandDiffusionTensorMathematics ${DiffusionTensorMathematicsCmd} ${movingVolume} ${movingFAMap})
Run (outputDiffusionTensorMathematics ${commandDiffusionTensorMathematics} errorDiffusionTensorMathematics)
If(${errorDiffusionTensorMathematics} != '')
  echo('Error DiffusionTensorMathematics: ' ${errorDiffusionTensorMathematics})
  exit()
Endif(${errorDiffusionTensorMathematics})


#Optional: FA Masking
If (${fixedMaskVolume} != '')
  set (commandMask ${MaskCmd} ${fixedFAMap} ${fixedMaskVolume} ${fixedFAMap})
  Run (outputMask ${commandMask} errorMask)
  If(${errorMask} != '')
    echo('Error Mask: ' ${errorMask})
    exit()
  Endif(${errorMask})
EndIf (${fixedMaskVolume})

If (${movingMaskVolume} != '')
  set (commandMask ${MaskCmd} ${movingFAMap} ${movingMaskVolume} ${movingFAMap})
  Run (outputMask ${commandMask} errorMask)
  If(${errorMask} != '')
    echo('Error Mask: ' ${errorMask})
    exit()
  Endif(${errorMask})
EndIf(${movingMaskVolume})


# Registration via ANTS

echo()
echo('Registration...')
set(Transform '')
set (DeformationField '')

  If (${ANTSOutbase} == '')
    set (ANTSOutbase ${OutputDir}/${movingVolumeHead}_FA_)
  EndIf (${ANTSOutbase})

  set(IsWarping 1)
  If (${ANTSRegistrationType} == 'Affine' || ${ANTSRegistrationType} == 'Rigid')
    set(IsWarping 0)
  EndIf()

  set (commandANTS ${ANTSCmd} 3 -m ${ANTSSimilarityMetric}[${fixedFAMap},${movingFAMap},1,${ANTSSimilarityParameter}] -o ${ANTSOutbase})

  If (${ANTSRegistrationType} == 'Affine')
    set (commandANTS ${commandANTS} -i 0)
  EndIf(${ANTSRegistrationType})

  If (${ANTSRegistrationType} == 'Rigid')
    set (commandANTS ${commandANTS} -i 0 --rigid-affine true)
  EndIf(${ANTSRegistrationType})

  If (${ANTSRegistrationType} == 'GreedyDiffeo')
    set (commandANTS ${commandANTS} -i ${ANTSIterations} -t SyN[${ANTSTransformationStep}])
    If (${ANTSGaussianSmoothingOff} == 0)
      set (commandANTS ${commandANTS} -r Gauss[${ANTSGaussianSigma},0])
    EndIf(${ANTSGaussianSmoothingOff})
  EndIf(${ANTSRegistrationType})

  If (${ANTSRegistrationType} == 'SpatioTempDiffeo')
    set (commandANTS ${commandANTS} -i ${ANTSIterations} -t SyN[${ANTSTransformationStep})
    If (${ANTSGaussianSmoothingOff} == 0)
      set (commandANTS ${commandANTS} -r Gauss[${ANTSGaussianSigma},0.5])
    EndIf(${ANTSGaussianSmoothingOff})
  EndIf(${ANTSRegistrationType})

  Run (outputANTS ${commandANTS} errorANTS)
  echo('ANTS: ' ${outputANTS})
  If(${errorANTS} != '')
    echo('Error ANTS: ' ${errorANTS})
    exit()
  Endif(${errorANTS})

# Define deformation files
set(Transform ${ANTSOutbase}Affine.txt)
set (DeformationField ${ANTSOutbase}Warp.nii.gz)

# Applying deformation to FA map
If (${outputResampledFAVolume} != '')
  echo()
  echo('FA resampling...')
  set (commandWarpImageMultiTransform ${WarpImageMultiTransformCmd} 3 ${movingFAMap} ${outputResampledFAVolume} -R ${outputFixedFAVolume})
  If(${IsWarping} == 1)
    set (commandWarpImageMultiTransform ${commandWarpImageMultiTransform} ${DeformationField} ${Transform})
  Else(${IsWarping})
    set (commandWarpImageMultiTransform ${commandWarpImageMultiTransform} ${Transform})
  EndIf(${IsWarping})

  Run (outputWarpImageMultiTransform ${commandWarpImageMultiTransform} errorWarpImageMultiTransform)
  If(${errorWarpImageMultiTransform} != '')
    echo('Error WarpImageMultiTransform: ' ${errorWarpImageMultiTransform})
    exit()
  Endif(${errorWarpImageMultiTransform})
EndIf(${outputResampledFAVolume})

# DTI resampling
echo()
echo('DTI resampling...')
If (${outputVolume} != '')
  set (ResampledDTI ${outputVolume})
Else(${outputVolume})
    set (ResampledDTI ${OutputDir}/${movingVolumeHead}_warp.nrrd)
EndIf(${outputVolume})

set (commandWarpTensorImageMultiTransform ${WarpTensorImageMultiTransformCmd} 3 ${movingVolume} ${ResampledDTI} -R ${fixedVolume})
If(${IsWarping} == 1)
  set (commandWarpTensorImageMultiTransform ${commandWarpTensorImageMultiTransform} ${DeformationField} ${Transform})
Else(${IsWarping})
  set (commandWarpTensorImageMultiTransform ${commandWarpTensorImageMultiTransform} ${Transform})
EndIf(${IsWarping})
Run (outputWarpTensorImageMultiTransform ${commandWarpTensorImageMultiTransform} errorWarpTensorImageMultiTransform)
If(${errorWarpTensorImageMultiTransform} != '')
  echo('Error WarpTensorImageMultiTransform: ' ${errorWarpTensorImageMultiTransform})
  exit()
Endif(${errorWarpTensorImageMultiTransform})

If (${outputTransform} != '')
  echo()
  echo('Copying Transform file...')
  CopyFile(${Transform} ${outputTransform})
  DeleteFile(${Transform})
EndIf (${outputTransform})

If (${outputDeformationFieldVolume} != '')
  echo()
  echo('Copying deformation field...')
  CopyFile(${DeformationField} ${outputDeformationFieldVolume})
  DeleteFile(${DeformationField})
EndIf(${outputDeformationFieldVolume})

#Delete temporary files
If (${outputFixedFAVolume} == '')
  DeleteFile(${fixedFAMap})
EndIf(${outputFixedFAVolume})
If (${outputMovingFAVolume} == '')
  DeleteFile(${movingFAMap})
EndIf(${outputMovingFAVolume})
